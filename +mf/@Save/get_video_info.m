function [info] = get_video_info(obj)
    % gives string with all information about the system
    
    info = ['GPE simulation of ', num2str(obj.model.D), 'D problem with ', ...
             num2str(obj.model.config.N), ' of ', obj.model.config.che, ...
             ' atoms at T = ', num2str(obj.model.to_temp(obj.model.config.T)), ' K. ', ...
             'Dissipation rate gamma = ', num2str(obj.model.config.gamma), '. ', ...
             'Coupling constant g = ', num2str(obj.model.config.g, '%.2g'), '.', newline, newline];


    info = [info, 'The parameters are written in terms of harmonic oscillator dimensionless units: ', newline, ...
            'oscillator lengths: (lr , lz) = (', num2str(obj.model.l.r, '%.2g'), ', ', num2str(obj.model.l.z, '%.2g'), ') m,', newline, ...
            'corresponding frequencies: (wr , wz) = 2*pi*(', num2str(obj.model.w.r/(2*pi), '%.3g'), ', ', num2str(obj.model.w.z/(2*pi), '%.3g'), ') Hz.', newline, newline];
    
    info = [info, 'In this simulation we apply the following potentials:', newline];
    fields = fieldnames(obj.model.Vs);
    for i = 1 : length(fields)
        field = fields{i};
        for j = 1 : size(obj.model.Vs.(field), 2)
            info = [info, '--------------------', newline, ...
                   'POTENTIAL ', field, '-', num2str(j), ': ', newline];
            v = obj.model.Vs.(field)(j);


            if strcmp(field, 'toroidal')
                w =[v.w.r, v.w.z]/(2*pi);
                t = obj.model.to_time(v.U.t);
                info = [info, ...
                'harmonical frequencies: (wr , wz) = 2pi*(', num2str(w(1), '%.3g'), ', ', num2str(w(2), '%.3g'), ') Hz,', newline, ...
                'toroidal shape: (Rx, Ry) = (', num2str(v.R.x, '%.1f'), ', ', num2str(v.R.y, '%.1f') ') lr,', newline, ...
                'angular velocity: W = ', num2str(v.W), ' wr.', newline];
                if abs(v.U.max) > 0
                    info = [info, 'An additional term U = ', num2str(v.U.max, '%.3g'), ' hwr is added to the harmonic oscillator', newline, ...' ...
                                  'with the following linear protocol: t = [', num2str(t(1)), ', ', num2str(t(2)), ', ', num2str(t(3)), ', ', num2str(t(4)), '] s.', newline];
                end
            end

            if strcmp(field, 'cosine')
                t = obj.model.to_time(v.U.t);
                info = [info, ...
                'Cosine potential with the following formula: V = U cos(2k phi - Wt + phi0) is applied, where', newline, ...
                'k = ', num2str(v.n/2), ', W = 2pi*', num2str(obj.model.to_omega(v.W)/(2*pi)), ' Hz, phi0 = ', num2str((v.phi)/pi, '%.2f'), ' pi.', newline, ...
                'We use ', v.U.shape, ' pulse shape with following amplitude and time protocol: ', newline ...
                'U = ', num2str(v.U.max, '%.3g'), ' hwr, t = [', num2str(t(1)), ', ', num2str(t(2)), ', ', num2str(t(3)), ', ', num2str(t(4)), '] s.', newline];
            end

            if strcmp(field, 'ladder')
                cn_text = '[';
                for i = 1 : v.n
                    cn_text = [cn_text, num2str(v.phi(i)), ', '];
                end
                cn_text = [cn_text(1:end - 2), ']'];

                t = obj.model.to_time(v.U.t);
                info = [info, ...
                'Potential separated on n equal sectors with different amplitudes c(n)*U, where:', newline, ...
                 'U = ', num2str(v.U.max, '%.3g'), ' hwr, n = ', num2str(v.n), ', w = 2pi*', num2str(obj.model.to_omega(v.w)/(2*pi)), ' Hz.', newline, ...
                'Potential is sharply limited along r-direction rlims = [', num2str(v.rlim(1), '%.1f'), ', ', num2str(v.rlim(2), '%.1f'), '].', newline, ...
                'c(n) = ', cn_text, '.', newline, ...
                'Potential linear protocol: t = [', num2str(t(1)), ', ', num2str(t(2)), ', ', num2str(t(3)), ', ', num2str(t(4)), '] s.', newline];
            end

        end
    end

 
    info = [info, newline, 'Grid used for computations: (Nx, Ny, Nz) = (', ...
                  num2str(obj.model.grid.N.x), ', ', ...
                  num2str(obj.model.grid.N.y), ', ', ...
                  num2str(obj.model.grid.N.z), ')', newline, ...
                  'the length of modeled box: (Lx, Ly, Lz) = (', ...
                  num2str(obj.model.grid.L.x), ', ', ...
                  num2str(obj.model.grid.L.y), ', ', ...
                  num2str(obj.model.grid.L.z), ') lr'];
end
